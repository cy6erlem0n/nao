<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="Trick" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="286" y="81">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[from naoqi import ALProxy
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = None
        self.posture = None
        self.speech = None
        self.logger = None

    def onLoad(self):
        try:
            self.logger = self.session().service("ALLogger")
            self.logger.info("MyClass", "Блок загружен и готов к работе.")

            # Инициализация сервисов
            self.motion = self.session().service("ALMotion")
            self.posture = self.session().service("ALRobotPosture")
            self.speech = self.session().service("ALTextToSpeech")
        except Exception as e:
            if self.logger:
                self.logger.error("MyClass", "Ошибка при загрузке: " + str(e))

    def reset_to_initial_pose(self):
        """Возвращаем NAO в начальную позу Stand."""
        try:
            self.logger.info("MyClass", "Возвращаем робота в позу Stand.")
            self.posture.goToPosture("Stand", 0.5)
            time.sleep(0.5)
        except Exception as e:
            self.logger.error("MyClass", "Ошибка при возврате в позу Stand: " + str(e))

    def track_dash(self):
        """Скрипт для следящего взгляда NAO за Dash."""
        try:
            self.logger.info("MyClass", "Начало слежения за Dash.")

            # NAO смотрит направо вниз
            self.motion.setAngles(["HeadYaw", "HeadPitch"], [-0.5, 0.3], 0.1)
            time.sleep(2)

            # Следящий взгляд влево
            self.motion.setAngles(["HeadYaw", "HeadPitch"], [0.1, 0.3], 0.05)
            time.sleep(0.5)
            self.motion.setAngles(["HeadYaw", "HeadPitch"], [0.2, 0.0], 0.05)
            time.sleep(0.5)
            self.motion.setAngles(["HeadYaw", "HeadPitch"], [0.3, 0.2], 0.05)
            time.sleep(0.5)
            self.motion.setAngles(["HeadYaw", "HeadPitch"], [0.4, 0.0], 0.05)
            time.sleep(0.5)
            self.motion.setAngles(["HeadYaw", "HeadPitch"], [0.5, 0.1], 0.05)
            time.sleep(26.5)
            self.motion.setAngles(["HeadYaw", "HeadPitch"], [0.5, -0.3], 0.1)
            time.sleep(0.5)
            self.motion.setAngles(["HeadYaw", "HeadPitch"], [0.5, 0.3], 0.1)
            time.sleep(0.5)
            self.motion.setAngles(["HeadYaw", "HeadPitch"], [0.5, 0.1], 0.1)
            time.sleep(1)
            # Возвращение головы в центр
            self.motion.setAngles(["HeadYaw", "HeadPitch"], [0.0, 0.0], 0.1)
            self.logger.info("MyClass", "Слежение завершено.")
        except Exception as e:
            self.logger.error("MyClass", "Ошибка при слежении за Dash: " + str(e))

    def onInput_onStart(self):
        try:
            self.logger.info("MyClass", "Запуск скрипта слежения за Dash.")
            self.reset_to_initial_pose()
            self.track_dash()
        except Exception as e:
            self.logger.error("MyClass", "Ошибка при выполнении: " + str(e))
        finally:
            self.onStopped()

    def onInput_onStop(self):
        self.logger.info("MyClass", "Принудительная остановка блока.")
        self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="moving" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="483" y="106">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[from naoqi import ALProxy
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = None
        self.posture = None
        self.bIsRunning = False  # Флаг выполнения

    def onLoad(self):
        self.motion = self.session().service("ALMotion")
        self.posture = self.session().service("ALRobotPosture")

    def onUnload(self):
        if self.bIsRunning:
            self.motion.stopMove()

    def set_custom_stand(self):
        """Устанавливает стартовую позицию с заданной шириной ног."""
        try:
            self.motion.angleInterpolationWithSpeed(
                ["LHipYawPitch", "RHipYawPitch"],  # Угол бедер
                [0.15, -0.15],  # Ширина ног
                0.2
            )
            self.motion.angleInterpolationWithSpeed(
                ["LHipRoll", "RHipRoll"],  # Роллы бедер
                [0.1, -0.1],  # Легкий наклон для устойчивости
                0.2
            )
            time.sleep(0.5)
        except Exception as e:
            print("[ERROR] Ошибка при настройке стартовой позиции: {}".format(e))

    def onInput_onStart(self):
        if self.bIsRunning:
            print("[WARNING] Движение уже выполняется")
            return

        self.bIsRunning = True
        try:
            # Переход в исходную позу StandInit
            self.posture.goToPosture("StandInit", 0.7)
            time.sleep(1)

            # Настройка стартовой позиции
            print("[INFO] Настройка стартовой позиции")
            self.set_custom_stand()

            # Включить стабильность шага
            self.motion.moveInit()
            self.motion.setWalkArmsEnabled(True, True)  # Включить движение рук для баланса
            self.motion.setMotionConfig([["ENABLE_FOOT_CONTACT_PROTECTION", True]])  # Контроль контакта стоп

            # Настройка первого шага для плавного старта
            self.motion.setMotionConfig([
                ["MaxStepX", 0.02],  # Маленький шаг вперед
                ["MaxStepY", 0.05],  # Широкий шаг
                ["MaxStepFrequency", 0.2],  # Замедленный первый шаг
                ["StepHeight", 0.015],  # Низкий подъем ноги
                ["TorsoWx", 0.0]
            ])

            # Первый шаг вперед
            self.motion.moveTo(0.1, 0.02, 0.0)
            time.sleep(1)

            # Восстановление нормальных параметров для дальнейших шагов
            self.motion.setMotionConfig([
                ["MaxStepX", 0.04],
                ["MaxStepY", 0.03],
                ["MaxStepFrequency", 0.4],
                ["StepHeight", 0.02],
                ["TorsoWx", 0.0]
            ])

            # Два шага вперед
            for _ in range(2):
                self.motion.moveTo(0.3, 0.0, 0.0)
                time.sleep(1)

            # Плавный поворот налево
            self.motion.moveTo(0.0, 0.0, 0.785)  # Половина поворота
            time.sleep(1)
            self.motion.moveTo(0.0, 0.0, 0.785)  # Оставшаяся половина поворота
            time.sleep(1)

            # Два шага вперед
            for _ in range(1):
                self.motion.moveTo(0.3, 0.0, 0.0)
                time.sleep(1)

            self.onStopped()

        except Exception as e:
            print("[ERROR] Ошибка во время выполнения: {}".format(e))
        finally:
            self.bIsRunning = False

    def onInput_onStop(self):
        self.logger.info("MyClass", "Принудительная остановка блока.")
        self.onUnload()
        self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="objekt" id="3" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="294" y="315">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[from naoqi import ALProxy
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = None
        self.posture = None
        self.logger = None

    def onLoad(self):
        try:
            self.logger = self.session().service("ALLogger")
            self.logger.info("MyClass", "Блок загружен и готов к работе.")

            # Инициализация сервисов
            self.motion = self.session().service("ALMotion")
            self.posture = self.session().service("ALRobotPosture")
        except Exception as e:
            if self.logger:
                self.logger.error("MyClass", "Ошибка при загрузке: " + str(e))

    def reset_to_initial_pose(self):
        """Возвращаем NAO в начальную позу Stand."""
        try:
            self.logger.info("MyClass", "Возвращаем робота в позу Stand.")
            self.posture.goToPosture("Stand", 0.8)
            time.sleep(0.5)
        except Exception as e:
            self.logger.error("MyClass", "Ошибка при возврате в позу Stand: " + str(e))

    def manipulate_object(self):
        """NAO берет объект и перемещает его."""
        try:
            self.logger.info("MyClass", "Начало манипуляции с объектом.")

            # Приседание для захвата объекта
            self.logger.info("MyClass", "Робот приседает для захвата объекта.")
            self.motion.angleInterpolationWithSpeed(["KneePitch", "HipPitch"], [1.2, -0.6], 0.2)
            time.sleep(1)

            # Подготовка рук к захвату
            self.logger.info("MyClass", "Подготовка рук к захвату.")
            self.motion.angleInterpolationWithSpeed([
                "LShoulderPitch", "RShoulderPitch", "LShoulderRoll", "RShoulderRoll"
            ], [0.8, 0.8, 0.2, -0.2], 0.2)
            time.sleep(1)

            # Сведение рук ближе друг к другу для захвата объекта
            self.logger.info("MyClass", "Сведение рук для захвата объекта.")
            self.motion.angleInterpolationWithSpeed([
                "LElbowYaw", "RElbowYaw", "LElbowRoll", "RElbowRoll"
            ], [-1.2, 1.2, -1.5, 1.5], 0.2)
            time.sleep(1)

            # Разжимание пальцев для захвата
            self.logger.info("MyClass", "Разжимание пальцев для захвата.")
            self.motion.openHand("LHand")
            self.motion.openHand("RHand")
            time.sleep(1)

            # Сжимание пальцев для захвата объекта
            self.logger.info("MyClass", "Сжимание пальцев для захвата объекта.")
            self.motion.closeHand("LHand")
            self.motion.closeHand("RHand")
            time.sleep(1)

            # Поднятие объекта и возврат в полусогнутое положение
            self.logger.info("MyClass", "Поднятие объекта.")
            self.motion.angleInterpolationWithSpeed(["KneePitch", "HipPitch"], [0.5, 0.0], 0.2)
            time.sleep(1)

            # Поворот туловища влево для перемещения объекта
            self.logger.info("MyClass", "Разворот туловища влево для перемещения объекта.")
            self.motion.angleInterpolationWithSpeed([
                "LShoulderRoll", "RShoulderRoll", "TorsoYaw"
            ], [0.1, -0.1, 0.785], 0.2)  # Поворот на 45 градусов
            time.sleep(1)

            # Опускание объекта
            self.logger.info("MyClass", "Опускание объекта.")
            self.motion.angleInterpolationWithSpeed([
                "LShoulderPitch", "RShoulderPitch", "LShoulderRoll", "RShoulderRoll"
            ], [1.5, 1.5, 0.0, 0.0], 0.2)
            time.sleep(1)

            # Разжимание пальцев для отпускания объекта
            self.logger.info("MyClass", "Разжимание пальцев для отпускания объекта.")
            self.motion.openHand("LHand")
            self.motion.openHand("RHand")
            time.sleep(1)

            # Возврат в исходное положение
            self.logger.info("MyClass", "Возврат в исходное положение.")
            self.motion.angleInterpolationWithSpeed([
                "KneePitch", "HipPitch", "TorsoYaw"
            ], [0.0, 0.0, 0.0], 0.2)
            time.sleep(1)

        except Exception as e:
            self.logger.error("MyClass", "Ошибка при манипуляции с объектом: " + str(e))

    def onInput_onStart(self):
        try:
            self.logger.info("MyClass", "Запуск манипуляции с объектом.")
            self.reset_to_initial_pose()
            self.manipulate_object()
        except Exception as e:
            self.logger.error("MyClass", "Ошибка при выполнении: " + str(e))
        finally:
            self.onStopped()

    def onInput_onStop(self):
        self.logger.info("MyClass", "Принудительная остановка блока.")
        self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="126" y="60">
              <bitmap>media/images/box/wait.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
              <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
              <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
              <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
            </Box>
            <Box name="Stand Up" id="4" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="94" y="208">
              <bitmap>media/images/box/movement/stand.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
              <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
              <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
              <Timeline enable="0">
                <BehaviorLayer name="StandUpBehavior">
                  <BehaviorKeyframe name="DetectRobotPose" index="1">
                    <Diagram>
                      <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                          <Choice value="Crouch" />
                          <Choice value="LyingBack" />
                          <Choice value="LyingBelly" />
                          <Choice value="Sit" />
                          <Choice value="SitRelax" />
                          <Choice value="StandInit" />
                          <Choice value="Stand" />
                          <Choice value="StandZero" />
                        </Parameter>
                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                        <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
              <Resource name="All motors" type="Lock" timeout="0" />
            </Box>
            <Box name="objekt leicht" id="5" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="722" y="115">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[from naoqi import ALProxy
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = None
        self.posture = None
        self.logger = None

    def onLoad(self):
        try:
            self.logger = self.session().service("ALLogger")
            self.logger.info("MyClass", "Блок загружен и готов к работе.")

            # Инициализация сервисов
            self.motion = self.session().service("ALMotion")
            self.posture = self.session().service("ALRobotPosture")
        except Exception as e:
            if self.logger:
                self.logger.error("MyClass", "Ошибка при загрузке: " + str(e))

    def reset_to_initial_pose(self):
        """Возвращаем NAO в начальную позу Stand."""
        try:
            self.logger.info("MyClass", "Возвращаем робота в позу Stand.")
            self.posture.goToPosture("StandInit", 0.6)
            time.sleep(0.5)
        except Exception as e:
            self.logger.error("MyClass", "Ошибка при возврате в позу Stand: " + str(e))

    def knock_object(self):
        """NAO ударяет предмет перед собой."""
        try:
            self.logger.info("MyClass", "Начало манипуляции с предметом.")

            # Приседание для подготовки
            self.logger.info("MyClass", "Робот приседает.")
            self.motion.angleInterpolationWithSpeed([
                "KneePitch", "HipPitch"
            ], [1.2, -0.4], 0.3)  # Приседание
            time.sleep(1)

            # Подготовка рук для удара (отведение назад)
            self.logger.info("MyClass", "Подготовка рук для удара.")
            self.motion.angleInterpolationWithSpeed([
                "LShoulderPitch", "RShoulderPitch", "LShoulderRoll", "RShoulderRoll",
                "LElbowYaw", "RElbowYaw", "LElbowRoll", "RElbowRoll"
            ], [
                1.5, 1.5, 0.2, -0.2, -1.3, 1.3, -0.5, 0.5
            ], 0.2)
            time.sleep(0.5)

            # Удар вперед
            self.logger.info("MyClass", "Удар предмета.")
            self.motion.angleInterpolationWithSpeed([
                "LShoulderPitch", "RShoulderPitch", "LShoulderRoll", "RShoulderRoll",
                "LElbowRoll", "RElbowRoll"
            ], [
                0.3, 0.3, 0.0, 0.0, -1.0, 1.0
            ], 0.3)  # Удар вперед
            time.sleep(1)

            # Возвращение рук в исходное положение
            self.logger.info("MyClass", "Возвращение рук в исходное положение.")
            self.motion.angleInterpolationWithSpeed([
                "LShoulderPitch", "RShoulderPitch", "LShoulderRoll", "RShoulderRoll",
                "LElbowYaw", "RElbowYaw", "LElbowRoll", "RElbowRoll"
            ], [
                1.5, 1.5, 0.0, 0.0, 0.0, 0.0, -0.5, 0.5
            ], 0.2)
            time.sleep(0.5)

            # Возвращение в стоячее положение
            self.logger.info("MyClass", "Возвращение в стоячее положение.")
            self.motion.angleInterpolationWithSpeed([
                "KneePitch", "HipPitch"
            ], [0.0, 0.0], 0.3)
            time.sleep(1)

        except Exception as e:
            self.logger.error("MyClass", "Ошибка при манипуляции с предметом: " + str(e))

    def onInput_onStart(self):
        try:
            self.logger.info("MyClass", "Запуск манипуляции с предметом.")
            self.reset_to_initial_pose()
            self.knock_object()
            self.reset_to_initial_pose()
        except Exception as e:
            self.logger.error("MyClass", "Ошибка при выполнении: " + str(e))
        finally:
            self.onStopped()

    def onInput_onStop(self):
        self.logger.info("MyClass", "Принудительная остановка блока.")
        self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Link inputowner="1" indexofinput="2" outputowner="6" indexofoutput="4" />
            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
            <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="4" />
            <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
