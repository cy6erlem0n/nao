<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="request " id="2" localization="8" tooltip="request for help" x="308" y="162">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[from naoqi import ALProxy
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = None
        self.posture = None
        self.speech = None
        self.speech_recognition = None
        self.memory = None
        self.isListening = False
        self.last_spoken = None
        self.word_dict = {  # Словарь ключ-значение
            "hallo": "Hallo, wie geht es dir?",
            "danke": "Bitte schön.",
            "tschüss": "Auf Wiedersehen!",
            "bitte": "Kein Problem!",
            "nao": "Ja, das bin ich, Nao.",
            "wie geht's": "Mir geht es gut, danke!",
            "gut": "Das freut mich zu hören.",
            "schlecht": "Das tut mir leid zu hören.",
            "dumm" : "Ich bin total dumm"
        }

    def onLoad(self):
        try:
            self.motion = self.session().service("ALMotion")
            self.posture = self.session().service("ALRobotPosture")
            self.speech = self.session().service("ALTextToSpeech")
            self.speech_recognition = self.session().service("ALSpeechRecognition")
            self.memory = self.session().service("ALMemory")

            # Установка языка и словаря
            self.speech.setLanguage("German")
            self.speech_recognition.setLanguage("German")
            vocabulary = list(self.word_dict.keys())
            self.speech_recognition.setVocabulary(vocabulary, False)

            # Параметры улучшения распознавания речи
            self.speech.setVolume(0.6)  # Уменьшение громкости
        except Exception as e:
            self.logger.error("Ошибка при загрузке: " + str(e))

    def reset_to_initial_pose(self):
        try:
            self.posture.goToPosture("Stand", 0.8)
            time.sleep(0.5)
        except Exception as e:
            self.logger.error("Ошибка при возврате в позу Stand: " + str(e))

    def simulate_listening(self):
        try:
            self.motion.setAngles("HeadYaw", 0.3, 0.1)  # Поворот головы вправо
            time.sleep(1)
            self.motion.setAngles("HeadYaw", -0.3, 0.1)  # Поворот головы влево
            time.sleep(1)
            self.motion.setAngles("HeadYaw", 0.0, 0.1)  # Возврат в центр
        except Exception as e:
            self.logger.error("Ошибка при движении головы: " + str(e))

    def listen_and_repeat(self):
        try:
            self.simulate_listening()
            self.speech.say("Hallo! Bitte sage etwas, und ich werde versuchen, es zu verstehen.")
            time.sleep(1)  # Пауза перед активацией слушания

            self.speech_recognition.subscribe("RepeatListener")
            time.sleep(5)  # Время прослушивания
            data = self.memory.getData("WordRecognized")
            self.speech_recognition.unsubscribe("RepeatListener")

            if data and len(data) > 0:
                recognized_word = data[0]
                confidence = data[1] if len(data) > 1 else 0.0

                if confidence > 0.3:
                    if recognized_word in self.word_dict:
                        self.speech.say(self.word_dict[recognized_word])
                    else:
                        self.speech.say("Entschuldigung, ich kenne dieses Wort nicht.")
                else:
                    self.speech.say("Entschuldigung, ich bin mir nicht sicher, was du gesagt hast.")
            else:
                self.speech.say("Entschuldigung, ich habe nichts gehört.")
        except Exception as e:
            self.logger.error("Ошибка при прослушивании и повторении: " + str(e))

    def onInput_onStart(self):
        try:
            self.logger.info("Запуск блока.")
            self.reset_to_initial_pose()
            self.listen_and_repeat()
        except Exception as e:
            self.logger.error("Ошибка при запуске: " + str(e))
        finally:
            self.onStopped()

    def onInput_onStop(self):
        try:
            self.speech_recognition.unsubscribe("RepeatListener")
            self.logger.info("Распознавание отключено.")
        except Exception as e:
            self.logger.error("Ошибка при остановке: " + str(e))
        finally:
            self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="moving" id="3" localization="8" tooltip="moving on next akt" x="616" y="179">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[pass]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="reading" id="1" localization="8" tooltip="reading attempt" x="188" y="398">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[from naoqi import ALProxy
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = None
        self.posture = None
        self.speech = None
        self.logger = None
        self.bIsRunning = False

    def onLoad(self):
        try:
            self.motion = self.session().service("ALMotion")
            self.posture = self.session().service("ALRobotPosture")
            self.speech = self.session().service("ALTextToSpeech")
            self.logger = self.session().service("ALLogger")
            self.logger.info("MyClass", "Блок загружен и готов к работе.")
        except Exception as e:
            self.logger.error("MyClass", "Ошибка при загрузке: " + str(e))

    def reset_to_initial_pose(self):
        """Возвращаем NAO в начальную позу Stand."""
        try:
            self.logger.info("MyClass", "Возвращаем робота в позу Stand.")
            self.posture.goToPosture("Stand", 0.8)  # Используем "Stand" для прямой позы
            time.sleep(0.5)
        except Exception as e:
            self.logger.error("MyClass", "Ошибка при возврате в позу Stand: " + str(e))

    def follow_bluebot(self):
        """Робот следит за движением Bluebot."""
        try:
            self.logger.info("MyClass", "Робот начинает следить за Bluebot.")
            self.motion.setAngles("HeadYaw", -0.5, 0.2)  # Поворот вправо
            self.motion.setAngles("HeadPitch", 0.3, 0.1)  # Наклон головы вниз
            time.sleep(2)

            self.motion.setAngles("HeadYaw", 0.0, 0.05)  # Возврат головы в центр
            time.sleep(4)

            self.motion.setAngles("HeadPitch", 0.0, 0.1)  # Возвращение головы в прямое положение
            time.sleep(1)

            self.logger.info("MyClass", "Робот завершил слежение за Bluebot.")
        except Exception as e:
            self.logger.error("MyClass", "Ошибка при слежении за Bluebot: " + str(e))

    def read_word(self):
        """Робот пытается прочитать слово."""
        try:
            self.logger.info("MyClass", "Робот делает вид, что читает слово.")
            self.motion.setAngles("HeadPitch", 0.2, 0.1)  # Лёгкий наклон вниз
            self.motion.setAngles("HeadYaw", -0.1, 0.1)  # Легкий поворот головы влево
            time.sleep(1.0)

            self.speech.say("\\rspd=30\\ \\vct=50\\ a... ")
            time.sleep(1.0)
            self.speech.say("\\rspd=30\\ \\vct=50\\ hmm... ")
            time.sleep(1.0)
            self.speech.say("\\rspd=40\\ \\vct=55\\ ehh... ")
            time.sleep(1.5)

            self.motion.setAngles("HeadPitch", 0.0, 0.1)  # Возврат головы в центр
            self.motion.setAngles("HeadYaw", 0.0, 0.1)
            time.sleep(1.0)

            self.logger.info("MyClass", "Робот завершил попытку прочитать слово.")
        except Exception as e:
            self.logger.error("MyClass", "Ошибка при попытке прочитать слово: " + str(e))

    def address_audience(self):
        """Робот обращается к зрителям."""
        try:
            self.logger.info("MyClass", "Робот обращается к зрителям.")

            # Указание на табличку ладонью вверх
            self.motion.angleInterpolationWithSpeed(
                ["RShoulderPitch", "RShoulderRoll", "RElbowYaw", "RElbowRoll", "RWristYaw"],
                [0.5, 0.0, 1.5, 0.0, 1.57],  # Положение руки и запястья, чтобы ладонь смотрела вверх
                0.2
            )
            self.motion.openHand("RHand")  # Открыть ладонь
            time.sleep(2)  # Задержка для фиксации на табличке
            self.motion.closeHand("RHand")  # Закрыть ладонь

            # Одобрительные кивки
            self.motion.setAngles("HeadPitch", -0.2, 0.1)  # Наклон вниз
            time.sleep(1.5)

            self.motion.setAngles("HeadPitch", 0.2, 0.1)  # Подъем головы
            time.sleep(1.0)

            self.motion.setAngles("HeadPitch", 0.3, 0.1)  # Поднятие головы
            time.sleep(0.3)
            self.motion.setAngles("HeadPitch", 0.1, 0.1)  # Небольшой наклон вниз
            time.sleep(0.3)

            self.motion.setAngles("HeadPitch", 0.2, 0.1)  # Поднятие головы
            time.sleep(1.0)

            self.motion.setAngles("HeadPitch", 0.0, 0.1)  # Возвращение в нейтральное положение
            self.logger.info("MyClass", "Робот завершил обращение к зрителям.")
        except Exception as e:
            self.logger.error("MyClass", "Ошибка при обращении к зрителям: " + str(e))



    def onInput_onStart(self):
        if self.bIsRunning:
            self.logger.warning("MyClass", "Блок уже выполняется.")
            return

        self.bIsRunning = True
        try:
            self.logger.info("MyClass", "Запуск блока.")

            # Устанавливаем начальную позу
            self.reset_to_initial_pose()

            # Выполнение последовательности действий
            self.follow_bluebot()
            self.read_word()
            self.address_audience()

            self.reset_to_initial_pose()

            self.onStopped()  # Сигнал завершения
        except Exception as e:
            self.logger.error("MyClass", "Ошибка при выполнении: " + str(e))
        finally:
            self.bIsRunning = False

    def onInput_onStop(self):
        self.logger.info("MyClass", "Принудительная остановка блока.")
        self.motion.rest()  # Перевод всех моторов в состояние покоя
        self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
