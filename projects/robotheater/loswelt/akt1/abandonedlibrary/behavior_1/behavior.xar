<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="reading" id="1" localization="8" tooltip="reading attempt" x="355" y="44">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[from naoqi import ALProxy
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.speech = None
        self.logger = None
        self.motion = None
        self.bIsRunning = False

    def onLoad(self):
        try:
            self.speech = self.session().service("ALTextToSpeech")
            self.logger = self.session().service("ALLogger")
            self.motion = self.session().service("ALMotion")
            self.logger.info("MyClass", "Блок загружен и готов к работе.")
        except Exception as e:
            self.logger.error("MyClass", "Ошибка при загрузке: " + str(e))

    def follow_bluebot(self):
        """Робот следит за движением Bluebot и смотрит вниз при повороте головы."""
        try:
            self.logger.info("MyClass", "Робот начинает следить за Bluebot.")

            # Поворачиваем голову вправо
            self.motion.setAngles("HeadYaw", -0.5, 0.2)  # Поворот вправо
            # Наклоняем голову вниз
            self.motion.setAngles("HeadPitch", 0.3, 0.1)  # Наклон головы вниз (угол 0.3, скорость 0.1)
            time.sleep(2)

            # Возвращаем голову в центр
            self.motion.setAngles("HeadYaw", 0.0, 0.05)  # Центр
            time.sleep(4)

            # Возвращаем голову в исходное положение (прямо)
            self.motion.setAngles("HeadPitch", 0.0, 0.1)  # Возвращение головы в исходное положение
            time.sleep(1)

            self.logger.info("MyClass", "Робот завершил слежение за Bluebot.")
        except Exception as e:
            self.logger.error("MyClass", "Ошибка при слежении за Bluebot: " + str(e))


    def read_word(self):
        """Робот пытается прочитать слово с имитацией размышлений и трудностей в чтении."""
        try:
            self.logger.info("MyClass", "Робот делает вид, что читает слово.")

            # Робот наклоняет голову вниз, как бы сосредотачиваясь
            self.motion.setAngles("HeadPitch", 0.2, 0.1)  # Лёгкий наклон вниз
            self.motion.setAngles("HeadYaw", -0.1, 0.1)  # Легкий поворот головы влево для сосредоточения
            time.sleep(1.0)  # Короткая задержка для придания времени на сосредоточение

            # Робот издаёт звуки, как будто пытается прочитать слово
            self.speech.say("\\rspd=30\\ \\vct=50\\ a... ")  # Медленная речь с паузами
            time.sleep(1.0)  # Добавление паузы между звуками
            self.speech.say("\\rspd=30\\ \\vct=50\\ hmm... ")  # Медленная речь с паузами
            time.sleep(1.0)
            # Еще раз пытается, но с неуверенностью
            self.speech.say("\\rspd=40\\ \\vct=55\\ ehh... ")  # Сомневающаяся речь
            time.sleep(1.5)  # Немного дольше, создаём паузу для реакции

            # После "чтения" робот возвращает голову в нормальное положение
            self.motion.setAngles("HeadPitch", 0.0, 0.1)  # Возврат головы в исходное положение
            self.motion.setAngles("HeadYaw", 0.0, 0.1)  # Возврат головы в центр
            time.sleep(1.0)

            self.logger.info("MyClass", "Робот завершил попытку прочитать слово.")
        except Exception as e:
            self.logger.error("MyClass", "Ошибка при попытке прочитать слово: " + str(e))


    def address_audience(self):
        """Робот обращается к зрителям с помощью движений головы, чтобы привлечь внимание."""
        try:
            self.logger.info("MyClass", "Робот обращается к зрителям с помощью движений головы.")

            # Робот немного наклоняет голову вниз, как будто он собирается что-то сказать или спросить
            self.motion.setAngles("HeadPitch", -0.2, 0.1)  # Лёгкий наклон головы вниз
            time.sleep(1.5)

            # Робот поднимает голову, привлекая внимание зрителей
            self.motion.setAngles("HeadPitch", 0.2, 0.1)  # Подъем головы
            time.sleep(1.0)

            # Далее робот может выполнить несколько движений, как будто просит внимание
            # Легкий кивок головы, чтобы показать согласие или просьбу
            self.motion.setAngles("HeadPitch", 0.3, 0.1)  # Поднятие головы
            time.sleep(0.3)  # Пауза
            self.motion.setAngles("HeadPitch", 0.1, 0.1)  # Небольшой наклон вниз
            time.sleep(0.3)  # Пауза

            # Робот снова поднимает голову, как бы подтверждая просьбу
            self.motion.setAngles("HeadPitch", 0.2, 0.1)  # Легкий наклон вверх
            time.sleep(1.0)  # Пауза, как будто ожидание реакции

            # Робот завершает жесты, возвращая голову в исходное положение
            self.motion.setAngles("HeadPitch", 0.0, 0.1)  # Возвращаем голову в нейтральное положение
            self.logger.info("MyClass", "Робот завершил обращение к зрителям.")

        except Exception as e:
            self.logger.error("MyClass", "Ошибка при обращении к зрителям: " + str(e))


    def onInput_onStart(self):
        if self.bIsRunning:
            self.logger.warning("MyClass", "Блок уже выполняется.")
            return

        self.bIsRunning = True
        try:
            self.logger.info("MyClass", "Запуск блока.")

            # Выполнение последовательности действий
            self.follow_bluebot()
            self.read_word()
            self.address_audience()

            self.onStopped()  # Сигнал завершения
        except Exception as e:
            self.logger.error("MyClass", "Ошибка при выполнении: " + str(e))
        finally:
            self.bIsRunning = False

    def onInput_onStop(self):
        self.logger.info("MyClass", "Принудительная остановка блока.")
        self.motion.rest()  # Переводит все моторы в состояние покоя
        self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="request " id="2" localization="8" tooltip="request for help" x="480" y="132">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[pass]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="moving" id="3" localization="8" tooltip="moving on next akt" x="628" y="116">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[pass]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="Stand Up" id="4" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="145" y="72">
              <bitmap>media/images/box/movement/stand.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
              <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
              <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
              <Timeline enable="0">
                <BehaviorLayer name="StandUpBehavior">
                  <BehaviorKeyframe name="DetectRobotPose" index="1">
                    <Diagram>
                      <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                          <Choice value="Crouch" />
                          <Choice value="LyingBack" />
                          <Choice value="LyingBelly" />
                          <Choice value="Sit" />
                          <Choice value="SitRelax" />
                          <Choice value="StandInit" />
                          <Choice value="Stand" />
                          <Choice value="StandZero" />
                        </Parameter>
                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                        <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
              <Resource name="All motors" type="Lock" timeout="0" />
            </Box>
            <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
            <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" />
            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="1" indexofinput="2" outputowner="4" indexofoutput="4" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
