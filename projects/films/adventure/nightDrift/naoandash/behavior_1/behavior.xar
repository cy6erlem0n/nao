<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="Stand Up" id="1" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="177" y="17">
              <bitmap>media/images/box/movement/stand.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
              <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
              <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
              <Timeline enable="0">
                <BehaviorLayer name="StandUpBehavior">
                  <BehaviorKeyframe name="DetectRobotPose" index="1">
                    <Diagram>
                      <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                          <Choice value="Crouch" />
                          <Choice value="LyingBack" />
                          <Choice value="LyingBelly" />
                          <Choice value="Sit" />
                          <Choice value="SitRelax" />
                          <Choice value="StandInit" />
                          <Choice value="Stand" />
                          <Choice value="StandZero" />
                        </Parameter>
                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                        <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
              <Resource name="All motors" type="Lock" timeout="0" />
            </Box>
            <Box name="searching" id="30" localization="8" tooltip="searching" x="432" y="203">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[from naoqi import ALProxy
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = None
        self.posture = None
        self.logger = None

    def onLoad(self):
        self.motion = self.session().service("ALMotion")
        self.posture = self.session().service("ALRobotPosture")
        self.logger = self.session().service("ALLogger")
        self.logger.info("NAO Look Around", "Behavior loaded.")

    def onInput_onStart(self):
        try:
            self.logger.info("NAO Look Around", "Starting behavior.")

            # В начальную позу
            self.posture.goToPosture("StandInit", 0.6)
            time.sleep(1)

            # Смотрит влево
            self.motion.setStiffnesses("Head", 1.0)
            self.motion.angleInterpolationWithSpeed("HeadYaw", 0.8, 0.2)
            time.sleep(1)

            # Смотрит вправо
            self.motion.angleInterpolationWithSpeed("HeadYaw", -0.8, 0.2)
            time.sleep(1)

            # Смотрит прямо
            self.motion.angleInterpolationWithSpeed("HeadYaw", 0.0, 0.2)
            time.sleep(1)

            self.logger.info("NAO Look Around", "Behavior completed.")
            self.onStopped()

        except Exception as e:
            self.logger.error("NAO Look Around", "Error during execution: {}".format(e))

    def onInput_onStop(self):
        self.logger.info("NAO Look Around", "Stopping behavior.")
        self.motion.setStiffnesses("Head", 0.0)
        self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="move" id="31" localization="8" tooltip="moved and turn" x="357" y="20">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[from naoqi import ALProxy
import time
import almath

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = None
        self.posture = None
        self.bIsRunning = False

    def onLoad(self):
        self.motion = self.session().service("ALMotion")
        self.posture = self.session().service("ALRobotPosture")

    def onUnload(self):
        if self.bIsRunning:
            self.motion.stopMove()

    def set_custom_stand(self):
        try:
            self.motion.angleInterpolationWithSpeed(
                ["LHipYawPitch", "RHipYawPitch"], [0.15, -0.15], 0.2)
            self.motion.angleInterpolationWithSpeed(
                ["LHipRoll", "RHipRoll"], [0.1, -0.1], 0.2)
            time.sleep(0.3)
        except Exception as e:
            print("[ERROR] Ошибка при установке позиции: {}".format(e))

    def onInput_onStart(self):
        if self.bIsRunning:
            print("[WARNING] Уже выполняется")
            return

        self.bIsRunning = True
        try:
            x = self.getParameter("Distance X (m)")
            y = self.getParameter("Distance Y (m)")
            theta_deg = self.getParameter("Theta (deg)")
            theta = theta_deg * almath.PI / 180
            enable_arms = self.getParameter("Arms movement enabled")

            self.posture.goToPosture("StandInit", 0.6)
            time.sleep(1)
            self.set_custom_stand()

            self.motion.moveInit()
            self.motion.setWalkArmsEnabled(enable_arms, enable_arms)
            self.motion.setMotionConfig([["ENABLE_FOOT_CONTACT_PROTECTION", True]])

            # Настройка первого шага для плавного старта
            self.motion.setMotionConfig([
                ["MaxStepX", 0.02],
                ["MaxStepY", 0.05],
                ["MaxStepFrequency", 0.2],
                ["StepHeight", 0.015],
                ["TorsoWx", 0.0]
            ])

            # Первый шаг вперед
            self.motion.moveTo(0.1, 0.02, 0.0)
            time.sleep(1)

            # Восстановление нормальных параметров для дальнейших шагов
            self.motion.setMotionConfig([
                ["MaxStepX", 0.04],
                ["MaxStepY", 0.03],
                ["MaxStepFrequency", 0.4],
                ["StepHeight", 0.02],
                ["TorsoWx", 0.0]
            ])

            # Основной шаг, заданный пользователем
            self.motion.moveTo(x, y, theta)

            self.onStopped()

        except Exception as e:
            print("[ERROR] {}".format(e))
        finally:
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.3" min="-1" max="1" tooltip="" id="5" />
              <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-0.3" max="0.3" tooltip="" id="6" />
              <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="" id="7" />
              <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="8" />
            </Box>
            <Box name="Fear" id="21" localization="8" tooltip="ID : #02C 0001&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Fear" x="598" y="37">
              <bitmap>media/images/box/movement/move.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="100">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="FaceLeds1" index="1">
                    <Diagram scale="100">
                      <Box name="Light_NeutralAndZenEyes" id="1" localization="8" tooltip="Set A Neutral Animated Gaze&#x0A;*** state: se/Leds/Light_NeutralAndZenEyes/Light_NeutralAndZenEyes.x ***&#x0A;*** ref box in: .//5a_release/Leds/Light_NeutralAndZenEyes/Light_NeutralAndZenEyes.xar ***&#x0A;*** last modification date(svn): 2009-04-17 14:01:23 +0200 ***" x="176" y="93">
                        <bitmap>media/images/box/interaction/LED.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self);
    self.bMustStop = False;
    self.bIsRunning = False;

  def onLoad(self):
    self.leds = self.session().service("ALLeds")

  def onUnload(self):
    self.onInput_onStop(); # will stop current loop execution

  def onInput_onStart(self):
    #self.log( self.getName() + ": start - begin" );

    if( self.bIsRunning ):
      #print( self.getName() + ": already started => nothing" );
      return;

    self.bIsRunning = True;
    self.bMustStop = False;

    rDuration = 1.0;
    self.leds.fadeRGB( "FaceLeds", 0x00ff00, rDuration, _async=True );

    while( not self.bMustStop ):
      rTime=1.0
      self.leds.fadeRGB( "FaceLedsTop", 0x000000, rTime );
      if( self.bMustStop ):
        break;
      self.leds.fadeRGB( "FaceLedsTop", 0x00ff00, rTime );
    # end while
    self.bIsRunning = False;
    self.onStopped();

  def onInput_onStop(self):
    self.bMustStop = True; # will stop current loop execution]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                    </Diagram>
                  </BehaviorKeyframe>
                  <BehaviorKeyframe name="FaceLeds2" index="6">
                    <Diagram scale="100">
                      <Box name="Light_SurprisedEyes" id="1" localization="8" tooltip="Set An Animated Gaze Which Expresses Surprise&#x0A;*** state: se/Leds/Light_SurprisedEyes/Light_SurprisedEyes.x ***&#x0A;*** ref box in: .//5a_release/Leds/Light_SurprisedEyes/Light_SurprisedEyes.xar ***&#x0A;*** last modification date(svn): 2009-04-17 14:01:23 +0200 ***" x="133" y="78">
                        <bitmap>media/images/box/interaction/LED.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self);
    self.bMustStop = False;
    self.bIsRunning = False;

  def onLoad(self):
    self.leds = self.session().service("ALLeds")

  def onUnload(self):
    self.onInput_onStop(); # will stop current loop execution

  def onInput_onStart(self):
    #self.log( self.getName() + ": start - begin" );

    if( self.bIsRunning ):
      #print( self.getName() + ": already started => nothing" );
      return;

    self.bIsRunning = True;
    self.bMustStop = False;

    rDuration = 0.3;
    self.leds.fadeRGB( "FaceLedsTop", 0x000000, rDuration, _async=True );
    self.leds.fadeRGB( "FaceLedsInternal", 0xffff00, rDuration, _async=True );
    self.leds.fadeRGB( "FaceLedsBottom", 0x000000, rDuration, _async=True );
    self.leds.fadeRGB( "FaceLedsExternal", 0xffff00, rDuration );

    while( not self.bMustStop ):
      rTime=0.2
      self.leds.fadeRGB( "FaceLed7", 0x000000, rTime, _async=True );
      self.leds.fadeRGB( "FaceLed4", 0x000000, rTime );
      if( self.bMustStop ):
        break;
      self.leds.fadeRGB( "FaceLed7", 0xffff00, rTime, _async=True );
      self.leds.fadeRGB( "FaceLed4", 0xffff00, rTime );

    # end while
    self.bIsRunning = False;
    self.onStopped();

  def onInput_onStop(self):
    self.bMustStop = True; # will stop current loop execution]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
                <BehaviorLayer name="behavior_layer2">
                  <BehaviorKeyframe name="Sound" index="1">
                    <Diagram scale="100">
                      <Box name="Play Sound" id="4" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be&#x0A;wav, mp3, or ogg." x="75" y="48">
                        <bitmap>media/images/box/interaction/play_music.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                        <Parameter name="File path" inherits_from_parent="0" content_type="4" value="/surprise3.ogg" default_value="" tooltip="Path of the file (including its name) which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project resources and import&#x0A;files in the resources." id="5" />
                        <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                        <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                        <Parameter name="Panorama" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on NAO&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                        <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                  <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Panorama"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Panorama"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                  <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                  <Parameter name="Panorama" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on NAO&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                  <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                  <Resource name="Audio player" type="Stop on demand" timeout="0" />
                                </Box>
                                <Box name="Get File Path" id="1" localization="8" tooltip="Use this box to choose a resource file in its parameters. The filepath will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                  <bitmap>media/images/box/folder.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File path"))]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                  <Parameter name="File path" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Path of the file (including its name) which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project resources and import&#x0A;files in the resources." id="4" />
                                </Box>
                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
                <ActuatorList model="nao">
                  <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="-1">
                    <Key frame="5" value="6.41369" />
                    <Key frame="20" value="6.85315" />
                    <Key frame="25" value="-26.1062" />
                    <Key frame="33" value="-26.1062" />
                    <Key frame="38" value="-11.9557" />
                    <Key frame="48" value="-11.9557" />
                    <Key frame="52" value="7.90785" />
                    <Key frame="66" value="7.90785" />
                    <Key frame="70" value="-26.1062" />
                    <Key frame="78" value="-26.1062" />
                    <Key frame="83" value="-0.00240423" />
                    <Key frame="100" value="0.349163" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="-1">
                    <Key frame="5" value="-30.8524" />
                    <Key frame="20" value="-31.3797" />
                    <Key frame="25" value="-29.7098" />
                    <Key frame="33" value="-29.7098" />
                    <Key frame="38" value="-37.6201" />
                    <Key frame="48" value="-37.6201" />
                    <Key frame="52" value="-31.2919" />
                    <Key frame="66" value="-31.2919" />
                    <Key frame="70" value="-29.7098" />
                    <Key frame="78" value="-29.7098" />
                    <Key frame="83" value="-31.0282" />
                    <Key frame="100" value="-12.1315" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1">
                    <Key frame="4" value="102.04" />
                    <Key frame="75" value="99.1395" />
                    <Key frame="96" value="96.239" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1">
                    <Key frame="4" value="8.4352" />
                    <Key frame="75" value="9.31412" />
                    <Key frame="96" value="18.0154" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1">
                    <Key frame="4" value="-115.844" />
                    <Key frame="75" value="-119.535" />
                    <Key frame="96" value="-68.2064" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1">
                    <Key frame="4" value="-31.4628" />
                    <Key frame="75" value="-26.2772" />
                    <Key frame="96" value="-30.496" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1">
                    <Key frame="9" value="-1.93602" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1">
                    <Key frame="9" value="0.341458" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1">
                    <Key frame="4" value="98.2654" />
                    <Key frame="75" value="97.2985" />
                    <Key frame="96" value="98.4411" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1">
                    <Key frame="4" value="-16.9655" />
                    <Key frame="75" value="-13.2741" />
                    <Key frame="96" value="-10.9889" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1">
                    <Key frame="4" value="103.798" />
                    <Key frame="75" value="111.884" />
                    <Key frame="96" value="95.2722" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1">
                    <Key frame="4" value="29.8856" />
                    <Key frame="75" value="29.8856" />
                    <Key frame="96" value="31.5555" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1">
                    <Key frame="9" value="0.349163" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1">
                    <Key frame="9" value="0.0192993" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1">
                    <Key frame="6" value="-10.193" />
                    <Key frame="12" value="-10.193" />
                    <Key frame="77" value="-8.69888" />
                    <Key frame="98" value="-31.2871" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1">
                    <Key frame="6" value="1.84813" />
                    <Key frame="12" value="2.11181" />
                    <Key frame="77" value="1.145" />
                    <Key frame="98" value="10.1978" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1">
                    <Key frame="6" value="-22.3221" />
                    <Key frame="12" value="-22.2342" />
                    <Key frame="77" value="-16.8728" />
                    <Key frame="98" value="21.2722" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1">
                    <Key frame="6" value="44.2071" />
                    <Key frame="12" value="44.295" />
                    <Key frame="77" value="62.5765" />
                    <Key frame="98" value="-2.90283" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1">
                    <Key frame="6" value="-17.4929" />
                    <Key frame="12" value="-17.4929" />
                    <Key frame="77" value="-36.1259" />
                    <Key frame="98" value="6.67737" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1">
                    <Key frame="6" value="-2.107" />
                    <Key frame="12" value="-2.107" />
                    <Key frame="77" value="-0.437054" />
                    <Key frame="98" value="-5.2711" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1">
                    <Key frame="6" value="-0.261271" />
                    <Key frame="12" value="-0.437054" />
                    <Key frame="77" value="0.266079" />
                    <Key frame="98" value="-11.6872" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1">
                    <Key frame="6" value="-23.4695" />
                    <Key frame="12" value="-23.3816" />
                    <Key frame="77" value="-16.4382" />
                    <Key frame="98" value="20.74" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1">
                    <Key frame="6" value="43.4209" />
                    <Key frame="12" value="43.333" />
                    <Key frame="77" value="62.2297" />
                    <Key frame="98" value="0.617646" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1">
                    <Key frame="6" value="-15.906" />
                    <Key frame="12" value="-15.906" />
                    <Key frame="77" value="-36.5606" />
                    <Key frame="98" value="4.22121" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1">
                    <Key frame="6" value="0.881321" />
                    <Key frame="12" value="0.881321" />
                    <Key frame="77" value="-0.788621" />
                    <Key frame="98" value="5.97904" />
                  </ActuatorCurve>
                </ActuatorList>
              </Timeline>
              <Resource name="Standing" type="Lock" timeout="1" />
              <Resource name="All motors" type="Lock" timeout="1" />
              <Resource name="Left eye leds" type="Lock" timeout="1" />
              <Resource name="Right eye leds" type="Lock" timeout="1" />
            </Box>
            <Box name="move (1)" id="2" localization="8" tooltip="moved and turn" x="120" y="199">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[from naoqi import ALProxy
import time
import almath

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = None
        self.posture = None
        self.bIsRunning = False

    def onLoad(self):
        self.motion = self.session().service("ALMotion")
        self.posture = self.session().service("ALRobotPosture")

    def onUnload(self):
        if self.bIsRunning:
            self.motion.stopMove()

    def set_custom_stand(self):
        try:
            self.motion.angleInterpolationWithSpeed(
                ["LHipYawPitch", "RHipYawPitch"], [0.15, -0.15], 0.2)
            self.motion.angleInterpolationWithSpeed(
                ["LHipRoll", "RHipRoll"], [0.1, -0.1], 0.2)
            time.sleep(0.3)
        except Exception as e:
            print("[ERROR] Ошибка при установке позиции: {}".format(e))

    def onInput_onStart(self):
        if self.bIsRunning:
            print("[WARNING] Уже выполняется")
            return

        self.bIsRunning = True
        try:
            x = self.getParameter("Distance X (m)")
            y = self.getParameter("Distance Y (m)")
            theta_deg = self.getParameter("Theta (deg)")
            theta = theta_deg * almath.PI / 180
            enable_arms = self.getParameter("Arms movement enabled")

            self.posture.goToPosture("StandInit", 0.6)
            time.sleep(1)
            self.set_custom_stand()

            self.motion.moveInit()
            self.motion.setWalkArmsEnabled(enable_arms, enable_arms)
            self.motion.setMotionConfig([["ENABLE_FOOT_CONTACT_PROTECTION", True]])

            # Настройка первого шага для плавного старта
            self.motion.setMotionConfig([
                ["MaxStepX", 0.02],
                ["MaxStepY", 0.05],
                ["MaxStepFrequency", 0.2],
                ["StepHeight", 0.015],
                ["TorsoWx", 0.0]
            ])

            # Первый шаг вперед
            self.motion.moveTo(0.1, 0.02, 0.0)
            time.sleep(1)

            # Восстановление нормальных параметров для дальнейших шагов
            self.motion.setMotionConfig([
                ["MaxStepX", 0.04],
                ["MaxStepY", 0.03],
                ["MaxStepFrequency", 0.4],
                ["StepHeight", 0.02],
                ["TorsoWx", 0.0]
            ])

            # Основной шаг, заданный пользователем
            self.motion.moveTo(x, y, theta)

            self.onStopped()

        except Exception as e:
            print("[ERROR] {}".format(e))
        finally:
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.3" min="-1" max="1" tooltip="" id="5" />
              <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-0.3" max="0.3" tooltip="" id="6" />
              <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="-180" default_value="0" min="-180" max="180" tooltip="" id="7" />
              <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="8" />
            </Box>
            <Box name="move (2)" id="3" localization="8" tooltip="moved and turn" x="280" y="190">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[from naoqi import ALProxy
import time
import almath

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = None
        self.posture = None
        self.bIsRunning = False

    def onLoad(self):
        self.motion = self.session().service("ALMotion")
        self.posture = self.session().service("ALRobotPosture")

    def onUnload(self):
        if self.bIsRunning:
            self.motion.stopMove()

    def set_custom_stand(self):
        try:
            self.motion.angleInterpolationWithSpeed(
                ["LHipYawPitch", "RHipYawPitch"], [0.15, -0.15], 0.2)
            self.motion.angleInterpolationWithSpeed(
                ["LHipRoll", "RHipRoll"], [0.1, -0.1], 0.2)
            time.sleep(0.3)
        except Exception as e:
            print("[ERROR] Ошибка при установке позиции: {}".format(e))

    def onInput_onStart(self):
        if self.bIsRunning:
            print("[WARNING] Уже выполняется")
            return

        self.bIsRunning = True
        try:
            x = self.getParameter("Distance X (m)")
            y = self.getParameter("Distance Y (m)")
            theta_deg = self.getParameter("Theta (deg)")
            theta = theta_deg * almath.PI / 180
            enable_arms = self.getParameter("Arms movement enabled")

            self.posture.goToPosture("StandInit", 0.6)
            time.sleep(1)
            self.set_custom_stand()

            self.motion.moveInit()
            self.motion.setWalkArmsEnabled(enable_arms, enable_arms)
            self.motion.setMotionConfig([["ENABLE_FOOT_CONTACT_PROTECTION", True]])

            # Настройка первого шага для плавного старта
            self.motion.setMotionConfig([
                ["MaxStepX", 0.02],
                ["MaxStepY", 0.05],
                ["MaxStepFrequency", 0.2],
                ["StepHeight", 0.015],
                ["TorsoWx", 0.0]
            ])

            # Первый шаг вперед
            self.motion.moveTo(0.1, 0.02, 0.0)
            time.sleep(1)

            # Восстановление нормальных параметров для дальнейших шагов
            self.motion.setMotionConfig([
                ["MaxStepX", 0.04],
                ["MaxStepY", 0.03],
                ["MaxStepFrequency", 0.4],
                ["StepHeight", 0.02],
                ["TorsoWx", 0.0]
            ])

            # Основной шаг, заданный пользователем
            self.motion.moveTo(x, y, theta)

            self.onStopped()

        except Exception as e:
            print("[ERROR] {}".format(e))
        finally:
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.3" min="-1" max="1" tooltip="" id="5" />
              <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-0.3" max="0.3" tooltip="" id="6" />
              <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="" id="7" />
              <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="8" />
            </Box>
            <Box name="Sit Down" id="4" localization="8" tooltip="the robot tries to sit down from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="61" y="311">
              <bitmap>media/images/box/movement/sit_ground.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in sitting down." id="4" />
              <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to sit down after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
              <Timeline enable="0">
                <BehaviorLayer name="SitDownBehavior">
                  <BehaviorKeyframe name="DetectRobotPose" index="1">
                    <Diagram>
                      <Box name="Goto Posture" id="7" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="371" y="101">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Sit" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                          <Choice value="Crouch" />
                          <Choice value="LyingBack" />
                          <Choice value="LyingBelly" />
                          <Choice value="Sit" />
                          <Choice value="SitRelax" />
                          <Choice value="StandInit" />
                          <Choice value="Stand" />
                          <Choice value="StandZero" />
                        </Parameter>
                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="5" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
              <Resource name="All motors" type="Lock" timeout="0" />
            </Box>
            <Link inputowner="2" indexofinput="2" outputowner="21" indexofoutput="4" />
            <Link inputowner="30" indexofinput="2" outputowner="3" indexofoutput="4" />
            <Link inputowner="0" indexofinput="4" outputowner="30" indexofoutput="4" />
            <Link inputowner="21" indexofinput="2" outputowner="1" indexofoutput="4" />
            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
