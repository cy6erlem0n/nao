<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram scale="70.7107">
            <Box name="main" id="5" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="282" y="53">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[from naoqi import ALProxy
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def listen_for_age(self, robotIP, PORT=9559):
        tts = ALProxy("ALTextToSpeech", robotIP, PORT)
        asr = ALProxy("ALSpeechRecognition", robotIP, PORT)
        memory = ALProxy("ALMemory", robotIP, PORT)

        # Подготовка к прослушиванию возраста
        asr.setLanguage("German")
        vocabulary = ["eins", "zwei", "drei", "vier", "fünf", "sechs", "sieben", "acht", "neun", "zehn", "elf", "zwölf",
                      "dreizehn", "vierzehn", "fünfzehn", "sechzehn", "siebzehn", "achtzehn", "neunzehn",
                      "zwanzig", "einundzwanzig", "zweiundzwanzig", "dreißig", "vierzig", "fünfzig"]
        asr.setVocabulary(vocabulary, False)
        asr.subscribe("AgeListener")

        tts.say("Hallo! Bitte sage mir dein genaues Alter.")

        # Слушаем ответ
        time.sleep(5)
        data = memory.getData("WordRecognized")
        print("Erkannt:", data)
        asr.unsubscribe("AgeListener")

        if data:
            recognized_age = data[0]
            return self.map_age_to_group(recognized_age)

        return None

    def map_age_to_group(self, recognized_age):
        """Классификация возраста по группам"""
        age_mapping = {
            "eins": 1, "zwei": 2, "drei": 3, "vier": 4, "fünf": 5, "sechs": 6, "sieben": 7, "acht": 8, "neun": 9, "zehn": 10,
            "elf": 11, "zwölf": 12, "dreizehn": 13, "vierzehn": 14, "fünfzehn": 15, "sechzehn": 16, "siebzehn": 17,
            "achtzehn": 18, "neunzehn": 19, "zwanzig": 20, "einundzwanzig": 21, "zweiundzwanzig": 22,
            "dreißig": 30, "vierzig": 40, "fünfzig": 50
        }

        age = age_mapping.get(recognized_age, None)

        if age is not None:
            if age <= 12:
                return "Kind"
            elif 13 <= age <= 17:
                return "Jugendlicher"
            elif age >= 18:
                return "Erwachsener"
        return None

    def suggest_books(self, age_group, robotIP, PORT=9559):
        tts = ALProxy("ALTextToSpeech", robotIP, PORT)

        if age_group == "Kind":
            tts.say("Für Kinder unter 12 Jahren empfehle ich Märchen, Abenteuergeschichten, und natürlich eine große Auswahl an Nintendo- oder PlayStation-Spielen. Es gibt auch tolle Brettspiele und CDs für Kinder.")
        elif age_group == "Jugendlicher":
            tts.say("Für Jugendliche zwischen 13 und 17 Jahren empfehle ich Science-Fiction und Fantasy-Bücher. Außerdem bieten wir Spiele für PlayStation und Nintendo an. Du könntest auch VR-Brillen ausprobieren oder 3D-Drucker für kreative Projekte nutzen.")
        elif age_group == "Erwachsener":
            tts.say("Für Erwachsene ab 18 Jahren bieten wir eine breite Auswahl an Belletristik, Sachbüchern und Selbsthilfe-Büchern. Für technikinteressierte gibt es 3D-Drucker, VR-Brillen und viele verschiedene Brettspiele oder CD-Sammlungen.")
        else:
            tts.say("Entschuldigung, ich habe dein Alter nicht verstanden.")

        tts.say("Möchtest du mehr Details zu einer dieser Kategorien hören? Frag mich einfach!")

    def onInput_onStart(self):
        robotIP = "169.254.96.196"  # IP-адрес твоего NAO
        PORT = 9559

        try:
            # NAO начинает разговор
            age_group = self.listen_for_age(robotIP, PORT)
            if age_group:
                self.suggest_books(age_group, robotIP, PORT)
            else:
                tts = ALProxy("ALTextToSpeech", robotIP, PORT)
                tts.say("Entschuldigung, ich konnte dein Alter nicht erkennen.")
        except Exception as e:
            print("Es ist ein Fehler aufgetreten: ", e)

        self.onStopped()

    def onInput_onStop(self):
        self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
              <Parameter name="robotIP" inherits_from_parent="0" content_type="3" value="169.254.225.69" default_value="169.254.60.127" custom_choice="0" tooltip="" id="4" />
              <Parameter name="port" inherits_from_parent="0" content_type="1" value="9559" default_value="9559" min="0" max="90000" tooltip="" id="5" />
            </Box>
            <Box name="Stand Up" id="1" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="120" y="60">
              <bitmap>media/images/box/movement/stand.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
              <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
              <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
              <Timeline enable="0">
                <BehaviorLayer name="StandUpBehavior">
                  <BehaviorKeyframe name="DetectRobotPose" index="1">
                    <Diagram>
                      <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                          <Choice value="Crouch" />
                          <Choice value="LyingBack" />
                          <Choice value="LyingBelly" />
                          <Choice value="Sit" />
                          <Choice value="SitRelax" />
                          <Choice value="StandInit" />
                          <Choice value="Stand" />
                          <Choice value="StandZero" />
                        </Parameter>
                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                        <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
              <Resource name="All motors" type="Lock" timeout="0" />
            </Box>
            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="3" />
            <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="4" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
